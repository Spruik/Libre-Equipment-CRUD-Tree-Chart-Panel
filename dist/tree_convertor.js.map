{"version":3,"sources":["../src/tree_convertor.js"],"names":["getTreeStructureData","data","obj","children","name","type","parent","distinctSites","findDisctinct","i","length","site","ob","info","push","getAreas","areas","filter","d","area","distinctAreas","k","collapsed","getLines","lines","production_line","distinctLines","l","line","getEquiment","e","equipment","disctinctEquipment","equip","arrObj","s","areaArr","reduce","arr","record","Array","from","Set"],"mappings":"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","file":"tree_convertor.js","sourcesContent":["/**\r\n * Expecting list of all data\r\n * Then first make a root, and sites\r\n * @param {*} data\r\n */\r\nexport function getTreeStructureData (data) {\r\n  // root\r\n  const obj = {\r\n    children: [],\r\n    name: 'Enterprise',\r\n    type: 'Root',\r\n    parent: null\r\n  }\r\n\r\n  // take all sites out from an array of objects, find disctinct, and make those distinct values a new array of strings\r\n  const distinctSites = findDisctinct(data, 'site')\r\n  for (let i = 0; i < distinctSites.length; i++) {\r\n    const site = distinctSites[i]\r\n    const ob = {\r\n      name: site,\r\n      children: [],\r\n      // collapsed: false,\r\n      type: 'Site',\r\n      parent: obj.name,\r\n      info: {\r\n        site: site\r\n      }\r\n    }\r\n    obj.children.push(ob)\r\n  }\r\n\r\n  return getAreas(obj, data)\r\n}\r\n\r\n/**\r\n * Expecting the tree structed obj, and the list structured array of objects\r\n * Add distinct areas to their matching sites\r\n * @param {*} obj\r\n * @param {*} data\r\n */\r\nfunction getAreas (obj, data) {\r\n  // Under the mother root, for each sites\r\n  for (let i = 0; i < obj.children.length; i++) {\r\n    const site = obj.children[i]\r\n    // find areas that are under this site\r\n    const areas = data.filter(d => d.area !== null && d.site === site.name)\r\n    // all areas to distinct areas\r\n    const distinctAreas = findDisctinct(areas, 'area')\r\n    // add each distinct area to this site\r\n    for (let k = 0; k < distinctAreas.length; k++) {\r\n      const area = distinctAreas[k]\r\n      const ob = {\r\n        name: area,\r\n        children: [],\r\n        collapsed: false,\r\n        type: 'Area',\r\n        parent: obj.children[i].name,\r\n        info: {\r\n          site: site.name,\r\n          area: area\r\n        }\r\n      }\r\n      obj.children[i].children.push(ob)\r\n    }\r\n  }\r\n  return getLines(obj, data)\r\n}\r\n\r\n/**\r\n * Expecting the tree structed obj, and the list structured array of objects\r\n * Add distinct lines to their matching areas\r\n * @param {*} obj\r\n * @param {*} data\r\n */\r\nfunction getLines (obj, data) {\r\n  for (let i = 0; i < obj.children.length; i++) {\r\n    const site = obj.children[i]\r\n    for (let k = 0; k < site.children.length; k++) {\r\n      const area = obj.children[i].children[k]\r\n      const lines = data.filter(d => d.production_line !== null && d.area === area.name && d.site === area.parent)\r\n      const distinctLines = findDisctinct(lines, 'line')\r\n      for (let l = 0; l < distinctLines.length; l++) {\r\n        const line = distinctLines[l]\r\n        const ob = {\r\n          name: line,\r\n          children: [],\r\n          collapsed: false,\r\n          type: 'Line',\r\n          parent: obj.children[i].children[k].name,\r\n          info: {\r\n            site: site.name,\r\n            area: area.name,\r\n            line: line\r\n          }\r\n        }\r\n        obj.children[i].children[k].children.push(ob)\r\n      }\r\n    }\r\n  }\r\n  return getEquiment(obj, data)\r\n}\r\n\r\n/**\r\n * Expecting the tree structed obj, and the list structured array of objects\r\n * Add distinct lines to their matching areas\r\n * @param {*} obj\r\n * @param {*} data\r\n */\r\nfunction getEquiment (obj, data) {\r\n  for (let i = 0; i < obj.children.length; i++) {\r\n    const site = obj.children[i]\r\n    for (let k = 0; k < site.children.length; k++) {\r\n      const area = site.children[k]\r\n      for (let e = 0; e < area.children.length; e++) {\r\n        const line = area.children[e]\r\n        const equipment = data.filter(d => d.equipment !== null && d.production_line === line.name && d.area === area.name && d.site === area.parent)\r\n        const disctinctEquipment = findDisctinct(equipment, 'equipment')\r\n        for (let l = 0; l < disctinctEquipment.length; l++) {\r\n          const equip = disctinctEquipment[l]\r\n          const ob = {\r\n            name: equip,\r\n            children: [],\r\n            collapsed: false,\r\n            type: 'Equipment',\r\n            parent: line.name,\r\n            info: {\r\n              site: site.name,\r\n              area: area.name,\r\n              line: line.name,\r\n              equipment: equip\r\n            }\r\n          }\r\n          obj.children[i].children[k].children[e].children.push(ob)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return obj\r\n}\r\n\r\n/**\r\n * Expecting an array of objects, and a string of keyword\r\n * Based on different attributes keywords passed in\r\n * Return an array of distinct and keyword-matching values of the array of objects\r\n * @param {*} arrObj\r\n * @param {*} s\r\n */\r\nfunction findDisctinct (arrObj, s) {\r\n  const areaArr = arrObj.reduce((arr, record) => {\r\n    if (s === 'site') {\r\n      arr.push(record.site)\r\n    } else if (s === 'area') {\r\n      arr.push(record.area)\r\n    } else if (s === 'line') {\r\n      arr.push(record.production_line)\r\n    } else if (s === 'equipment') {\r\n      arr.push(record.equipment)\r\n    }\r\n    return arr\r\n  }, [])\r\n  return Array.from(new Set(areaArr))\r\n}\r\n"]}