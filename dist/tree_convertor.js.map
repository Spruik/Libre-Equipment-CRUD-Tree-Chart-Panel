{"version":3,"sources":["../src/tree_convertor.js"],"names":["getTreeStructureData","data","obj","children","name","type","parent","distinctSites","findDisctinct","i","length","site","ob","info","push","getAreas","areas","filter","d","area","distinctAreas","k","collapsed","getLines","lines","production_line","distinctLines","l","line","getEquiment","e","equipment","disctinctEquipment","equip","arrObj","s","areaArr","reduce","arr","record","Array","from","Set"],"mappings":"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","file":"tree_convertor.js","sourcesContent":["  /**\n   * Expecting list of all data\n   * Then first make a root, and sites\n   * @param {*} data \n   */\n  export function getTreeStructureData(data){\n    //root\n    let obj = {\n      children: [],\n      name: 'Enterprise',\n      type: 'Root',\n      parent: null\n    }\n\n    //take all sites out from an array of objects, find disctinct, and make those distinct values a new array of strings\n    const distinctSites = findDisctinct(data, 'site')\n    for (let i = 0; i < distinctSites.length; i++) {\n      const site = distinctSites[i];\n      let ob = {\n        name: site,\n        children: [], \n        // collapsed: false,\n        type: 'Site', \n        parent: obj.name,\n        info:{\n            site: site\n        }\n      }\n      obj.children.push(ob)\n    }\n\n    return getAreas(obj, data)\n  }\n\n  /**\n   * Expecting the tree structed obj, and the list structured array of objects\n   * Add distinct areas to their matching sites\n   * @param {*} obj \n   * @param {*} data \n   */\n  function getAreas(obj, data){\n    //Under the mother root, for each sites\n    for (let i = 0; i < obj.children.length; i++) {\n      const site = obj.children[i];\n      //find areas that are under this site\n      const areas = data.filter(d => d.area !== null && d.site === site.name)\n      //all areas to distinct areas\n      const distinctAreas = findDisctinct(areas, 'area')\n      //add each distinct area to this site\n      for (let k = 0; k < distinctAreas.length; k++) {\n        const area = distinctAreas[k];\n        let ob = {\n          name: area, \n          children: [], \n          collapsed: false,\n          type: 'Area', \n          parent: obj.children[i].name,\n          info: {\n            site: site.name,\n            area: area\n          }\n        }\n        obj.children[i].children.push(ob)\n      }\n    }\n    return getLines(obj, data)\n  }\n\n  /**\n   * Expecting the tree structed obj, and the list structured array of objects\n   * Add distinct lines to their matching areas\n   * @param {*} obj \n   * @param {*} data \n   */\n  function getLines(obj, data){\n    for (let i = 0; i < obj.children.length; i++) {\n      const site = obj.children[i];\n      for (let k = 0; k < site.children.length; k++) {\n        const area = obj.children[i].children[k];\n        const lines = data.filter(d => d.production_line !== null && d.area === area.name && d.site === area.parent)\n        const distinctLines = findDisctinct(lines, 'line')\n        for (let l = 0; l < distinctLines.length; l++) {\n          const line = distinctLines[l];\n          let ob = {\n            name: line,\n            children: [], \n            collapsed: false,\n            type: 'Line', \n            parent: obj.children[i].children[k].name,\n            info: {\n              site: site.name,\n              area: area.name,\n              line: line\n            }\n          }\n          obj.children[i].children[k].children.push(ob)\n        }\n      }\n    }\n    return getEquiment(obj, data)\n  }\n\n    /**\n   * Expecting the tree structed obj, and the list structured array of objects\n   * Add distinct lines to their matching areas\n   * @param {*} obj \n   * @param {*} data \n   */\n  function getEquiment(obj, data){\n    for (let i = 0; i < obj.children.length; i++) {\n      const site = obj.children[i];\n      for (let k = 0; k < site.children.length; k++) {\n        const area = site.children[k];\n        for (let e = 0; e < area.children.length; e++) {\n          const line = area.children[e];\n          const equipment = data.filter(d => d.equipment !== null && d.production_line === line.name && d.area === area.name && d.site === area.parent)\n          const disctinctEquipment = findDisctinct(equipment, 'equipment')\n          for (let l = 0; l < disctinctEquipment.length; l++) {\n            const equip = disctinctEquipment[l];\n            let ob = {\n              name: equip,\n              children: [], \n              collapsed: false,\n              type: 'Equipment', \n              parent: line.name,\n              info: {\n                site: site.name,\n                area: area.name,\n                line: line.name,\n                equipment: equip\n              }\n            }\n            obj.children[i].children[k].children[e].children.push(ob)\n          }\n        }\n      }\n    }\n    return obj\n  }\n\n    /**\n   * Expecting an array of objects, and a string of keyword\n   * Based on different attributes keywords passed in\n   * Return an array of distinct and keyword-matching values of the array of objects\n   * @param {*} arrObj \n   * @param {*} s \n   */\n  function findDisctinct(arrObj, s){\n    const areaArr = arrObj.reduce((arr, record) => {\n      if (s === 'site') {\n        arr.push(record.site)\n      }else if (s === 'area'){\n        arr.push(record.area)\n      }else if (s === 'line') {\n        arr.push(record.production_line)\n      }else if (s === 'equipment') {\n        arr.push(record.equipment)\n      }\n      return arr\n    }, [])\n    return Array.from(new Set(areaArr))\n  }"]}